"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _utils = require("./../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

var _options = _interopRequireDefault(require("./options"));

var _container = _interopRequireDefault(require("./styled/container"));

var _label = _interopRequireDefault(require("./styled/label"));

var _innerContainer = _interopRequireDefault(require("./styled/innerContainer"));

var _select = _interopRequireDefault(require("./styled/select"));

var _error = _interopRequireDefault(require("./styled/error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Select element presents a menu of options.
 * @category Form
 */
var Select =
/*#__PURE__*/
function (_Component) {
  _inherits(Select, _Component);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, props));
    _this.selectId = (0, _utils.uniqueId)('select');
    _this.selectRef = _react["default"].createRef();
    return _this;
  }
  /**
   * Sets focus on the element.
   * @public
   */


  _createClass(Select, [{
    key: "focus",
    value: function focus() {
      this.selectRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.selectRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.selectRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          value = _this$props.value,
          onChange = _this$props.onChange,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          onClick = _this$props.onClick,
          error = _this$props.error,
          required = _this$props.required,
          disabled = _this$props.disabled,
          options = _this$props.options,
          style = _this$props.style,
          className = _this$props.className,
          id = _this$props.id,
          name = _this$props.name,
          hideLabel = _this$props.hideLabel;
      return _react["default"].createElement(_container["default"], {
        className: className,
        style: style,
        id: id
      }, _react["default"].createElement(_label["default"], {
        hideLabel: hideLabel,
        htmlFor: this.selectId
      }, _react["default"].createElement(_RequiredAsterisk["default"], {
        required: required
      }), label), _react["default"].createElement(_innerContainer["default"], {
        error: error,
        disabled: disabled
      }, _react["default"].createElement(_select["default"], {
        error: error,
        id: this.selectId,
        name: name,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur,
        onClick: onClick,
        value: value,
        required: required,
        disabled: disabled,
        ref: this.selectRef
      }, _react["default"].createElement(_options["default"], {
        options: options
      }))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement(_error["default"], null, error)));
    }
  }]);

  return Select;
}(_react.Component);

Select.propTypes = {
  /** Text label for the select. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The name of the select. */
  name: _propTypes["default"].string,

  /** Specifies the selected value. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** The action triggered when a option item is selected. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The option items to be displayed. */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    disabled: _propTypes["default"].bool
  })),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The id of the outer element. */
  hideLabel: _propTypes["default"].bool
};
Select.defaultProps = {
  label: undefined,
  value: undefined,
  name: undefined,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  error: null,
  required: false,
  disabled: false,
  options: [],
  className: undefined,
  style: undefined,
  id: undefined,
  hideLabel: false
};

var _default = (0, _withReduxForm["default"])(Select);

exports["default"] = _default;

//# sourceMappingURL=index.js.map